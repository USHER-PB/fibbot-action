name: Process PR and Compute Fibonacci

on:
  pull_request:
    branches:
      - master  # Change this to your default branch if necessary

jobs:
  process_pr:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt

      - name: Get PR content
        id: get_pr_content
        run: |
          echo "Fetching PR content..."
          PR_BODY=$(jq -r .pull_request.body $GITHUB_EVENT_PATH)
          echo "PR_BODY=$PR_BODY" >> $GITHUB_ENV

      - name: Extract integers from PR content
        id: extract_integers
        run: |
          echo "Extracting integers from PR content..."
          integers=$(echo "$PR_BODY" | grep -o '[0-9]\+')
          echo "EXTRACTED_INTEGERS=$integers" >> $GITHUB_ENV

      - name: Build Rust project
        run: cargo build --release

      - name: Run Rust project
        id: run_rust
        run: |
          for number in $EXTRACTED_INTEGERS; do
            output=$(./target/release/your_program_name true 100) # Update with your binary name
            echo "$output"
          done > results.txt
          echo "::set-output name=result::$(cat results.txt)"

      - name: Comment on PR
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNumber = context.issue.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const body = `ðŸ‘‹ Here are the Fibonacci results for the extracted numbers:\n\n\`\`\`\n${{ steps.run_rust.outputs.result }}\n\`\`\``;

            try {
              const response = await github.issues.createComment({
                issue_number: issueNumber,
                owner: owner,
                repo: repo,
                body: body
              });
              console.log('Response:', response);
            } catch (error) {
              console.error('Error:', error);
            }
